package cl.laaraucana.capaservicios.util;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Random;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Hex;

import cl.laaraucana.capaservicios.webservices.autogenerado.NotificacionTEF.NotificacionTEFEntradaVO;

public class EncriptUtils {

	private static String TRIPLE_DES_TRANSFORMATION = "DESede/CBC/PKCS5Padding";
	private static String ALGORITHM = "DESede";
	public static byte[] ba = new byte[8];

	private static byte[] generarIV() {
		byte[] vector = new byte[8];
		Random r = new Random();
		r.nextBytes(vector);
		return vector;
	}

	/**
	 * Recibe Xml en texto plano, encripta en 3DES y codifica en HEX.
	 * @param input
	 * @param key
	 * @return Xml encriptado y vector inicial
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchPaddingException
	 * @throws InvalidKeyException
	 * @throws InvalidAlgorithmParameterException
	 * @throws IllegalBlockSizeException
	 * @throws BadPaddingException
	 */
	public static HashMap<String, String> encode(String input, String key)
			throws NoSuchAlgorithmException, NoSuchPaddingException,
			InvalidKeyException, InvalidAlgorithmParameterException,
			IllegalBlockSizeException, BadPaddingException {
		byte[] bytesVector = generarIV();
		final IvParameterSpec iv = new IvParameterSpec(bytesVector);
		SecretKey keySpec = new SecretKeySpec(key.getBytes(), ALGORITHM);
		Cipher encrypter = Cipher.getInstance(TRIPLE_DES_TRANSFORMATION);
		encrypter.init(Cipher.ENCRYPT_MODE, keySpec, iv);
		
		char[] xmlHex =	Hex.encodeHex(encrypter.doFinal(input.getBytes()));
		
		HashMap<String, String> map = new HashMap<String, String>(2);
		map.put("vector", String.valueOf(Hex.encodeHex(bytesVector)));
		map.put("xmlEncript", String.valueOf(xmlHex));
		
		return map;
	}
	
	/**
	 * Desencripta texto encriptado en HEX + 3DES
	 * @param xml
	 * @param vector
	 * @param clave
	 * @return
	 */
	public static String decode(String xmlEncriptado, String key, String vectorIni) throws Exception{
		byte[] bites = null;
		try {
			char[] ivHEX = vectorIni.toCharArray();
			byte[] bytesIV = Hex.decodeHex(ivHEX);
			
			char[] xmlEncriptHEX = xmlEncriptado.toCharArray();
			byte[] bytesXMLEncode = Hex.decodeHex(xmlEncriptHEX);
			
			//La bd trae llave con espacios
			key = key.trim();			
			final IvParameterSpec iv = new IvParameterSpec(bytesIV);
			SecretKey keySpec = new SecretKeySpec(key.getBytes(), ALGORITHM);
			Cipher decrypter = Cipher.getInstance(TRIPLE_DES_TRANSFORMATION);
			decrypter.init(Cipher.DECRYPT_MODE, keySpec, iv);
			
			bites = decrypter.doFinal(bytesXMLEncode);
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("Error al desencriptar el Xml: " + e.getMessage());
		}
		String salida  = new String(bites, "UTF-8");
		return salida;
	}
	
	//FAlta corregir
	public static NotificacionTEFEntradaVO encriptaString (String idSisOri,String xmlConsulta, String keyCrypt){
		NotificacionTEFEntradaVO consulta = new NotificacionTEFEntradaVO();
		try {
			HashMap<String, String> res=  encode(xmlConsulta, keyCrypt);
			
			consulta.setIdSistemaOrigen(idSisOri);
			consulta.setXmlEncriptado(res.get("xmlEncript"));
			consulta.setVectorIni(res.get("vector"));
			
		} catch (Exception e) {
			e.printStackTrace();
		} 
		
		return consulta;
	}
	
//	public static HashMap<String, byte[]> encode(byte[] input, String key)
//	throws NoSuchAlgorithmException, NoSuchPaddingException,
//	InvalidKeyException, InvalidAlgorithmParameterException,
//	IllegalBlockSizeException, BadPaddingException {
//byte[] bytesVector = generarIV();
//final IvParameterSpec iv = new IvParameterSpec(bytesVector);
//SecretKey keySpec = new SecretKeySpec(key.getBytes(), ALGORITHM);
//Cipher encrypter = Cipher.getInstance(TRIPLE_DES_TRANSFORMATION);
//encrypter.init(Cipher.ENCRYPT_MODE, keySpec, iv);
//
//HashMap<String, byte[]> map = new HashMap<String, byte[]>();
//map.put("vector", bytesVector);
//map.put("xmlEncript", encrypter.doFinal(input));
//
//return map;
//}

/**
* Recibe Xml en texto plano, encripta en 3DES y codifica en HEX.
* @param input: Xml de entrada
* @param key: Llave de encriptación
* @return
* @throws NoSuchAlgorithmException
* @throws NoSuchPaddingException
* @throws InvalidKeyException
* @throws InvalidAlgorithmParameterException
* @throws IllegalBlockSizeException
* @throws BadPaddingException

public static String encode(String input, String key)
	throws NoSuchAlgorithmException, NoSuchPaddingException,
	InvalidKeyException, InvalidAlgorithmParameterException,
	IllegalBlockSizeException, BadPaddingException {
generarIV();
final IvParameterSpec iv = new IvParameterSpec(ba);
SecretKey keySpec = new SecretKeySpec(key.getBytes(), ALGORITHM);
Cipher encrypter = Cipher.getInstance(TRIPLE_DES_TRANSFORMATION);
encrypter.init(Cipher.ENCRYPT_MODE, keySpec, iv);
char[] xmlHex =	Hex.encodeHex(encrypter.doFinal(input.getBytes()));

return String.valueOf(xmlHex);
}
public static byte[] decode(byte[] input, String key, byte[] ivector)
	throws IllegalBlockSizeException, BadPaddingException,
	NoSuchAlgorithmException, NoSuchProviderException,
	NoSuchPaddingException, InvalidKeyException,
	InvalidAlgorithmParameterException {
final IvParameterSpec iv = new IvParameterSpec(ivector);
SecretKey keySpec = new SecretKeySpec(key.getBytes(), ALGORITHM);
Cipher decrypter = Cipher.getInstance(TRIPLE_DES_TRANSFORMATION);
decrypter.init(Cipher.DECRYPT_MODE, keySpec, iv);
return decrypter.doFinal(input);
}

public static byte[] desEncripta (String xml, String vector, String clave){
//pasa campos FolioSTL y Vector a char[]
char[] xmlEncriptHEX = xml.toCharArray();
char[] ivHEX = vector.toCharArray();

//pasa campos tipo char[] codificados en Hex a byte[] decodificados
byte[] bytesXMLEncode;
byte[] bytesXMLDecript = null;
try {
	bytesXMLEncode = Hex.decodeHex(xmlEncriptHEX);
	byte[] bytesIV = Hex.decodeHex(ivHEX);
	
	bytesXMLDecript = decode(bytesXMLEncode, clave, bytesIV);

} catch (Exception e) {
	e.printStackTrace();
}
return bytesXMLDecript;
}
*/
}
