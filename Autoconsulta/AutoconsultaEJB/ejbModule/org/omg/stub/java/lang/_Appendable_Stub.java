// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package org.omg.stub.java.lang;

import java.io.IOException;
import java.io.Serializable;
import java.lang.Appendable;
import java.lang.CharSequence;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.Remote;
import java.rmi.UnexpectedException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;
import org.omg.CORBA_2_3.portable.InputStream;

public class _Appendable_Stub extends Stub implements Appendable,
Remote {
    
    private static final String[] _type_ids = {
        "RMI:java.lang.Appendable:0000000000000000"
    };
    
    public String[] _ids() { 
        return (String [] )  _type_ids.clone();
    }
    
    public Appendable append(CharSequence arg0) throws IOException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("append__java_lang_CharSequence", true);
                        out.write_value((Serializable)arg0,CharSequence.class);
                        in = (InputStream)_invoke(out);
                        return (Appendable) in.read_abstract_interface(Appendable.class);
                    } catch (ApplicationException ex) {
                        in = (InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/io/IOEx:1.0")) {
                            throw (IOException) in.read_value(IOException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("append__java_lang_CharSequence",java.lang.Appendable.class);
                if (so == null) {
                    continue;
                }
                try {
                    CharSequence arg0Copy = (CharSequence) Util.copyObject(arg0,_orb());
                    Appendable result = ((java.lang.Appendable)so.servant).append(arg0Copy);
                    return (Appendable)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof IOException) {
                        throw (IOException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Appendable append(CharSequence arg0, int arg1, int arg2) throws IOException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("append__java_lang_CharSequence__long__long", true);
                        out.write_value((Serializable)arg0,CharSequence.class);
                        out.write_long(arg1);
                        out.write_long(arg2);
                        in = (InputStream)_invoke(out);
                        return (Appendable) in.read_abstract_interface(Appendable.class);
                    } catch (ApplicationException ex) {
                        in = (InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/io/IOEx:1.0")) {
                            throw (IOException) in.read_value(IOException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("append__java_lang_CharSequence__long__long",java.lang.Appendable.class);
                if (so == null) {
                    continue;
                }
                try {
                    CharSequence arg0Copy = (CharSequence) Util.copyObject(arg0,_orb());
                    Appendable result = ((java.lang.Appendable)so.servant).append(arg0Copy, arg1, arg2);
                    return (Appendable)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof IOException) {
                        throw (IOException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Appendable append(char arg0) throws IOException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("append__wchar", true);
                        out.write_wchar(arg0);
                        in = (InputStream)_invoke(out);
                        return (Appendable) in.read_abstract_interface(Appendable.class);
                    } catch (ApplicationException ex) {
                        in = (InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/io/IOEx:1.0")) {
                            throw (IOException) in.read_value(IOException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("append__wchar",java.lang.Appendable.class);
                if (so == null) {
                    continue;
                }
                try {
                    Appendable result = ((java.lang.Appendable)so.servant).append(arg0);
                    return (Appendable)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof IOException) {
                        throw (IOException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
}
